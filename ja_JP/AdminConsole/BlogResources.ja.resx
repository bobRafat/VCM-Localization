<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNews" xml:space="preserve">
    <value>ニュースを追加</value>
  </data>
  <data name="EditNews" xml:space="preserve">
    <value>ニュースを編集</value>
  </data>
  <data name="EnableManageNews" xml:space="preserve">
    <value>ログイン後にユーザに公開するお知らせや更新情報などのニュースを管理します。</value>
  </data>
  <data name="EnalbedAndVisible" xml:space="preserve">
    <value>設定が有効になり、サイト上で表示されるようになります。</value>
  </data>
  <data name="HOWTOManageAndEnableNews" xml:space="preserve">
    <value>ニュースを有効・管理する方法</value>
  </data>
  <data name="HowToManageNewsFunctionality" xml:space="preserve">
    <value>ニュース機能を管理する方法</value>
  </data>
  <data name="NewsAddPage" xml:space="preserve">
    <value>NewsAddPage</value>
  </data>
  <data name="NewsContent" xml:space="preserve">
    <value>ニュースの内容</value>
  </data>
  <data name="NewsCreated" xml:space="preserve">
    <value>ニュースが作成されました</value>
  </data>
  <data name="NewsDeleted" xml:space="preserve">
    <value>ニュースが削除されました</value>
  </data>
  <data name="NewsEditPage" xml:space="preserve">
    <value>NewsEditPage</value>
  </data>
  <data name="NewsList" xml:space="preserve">
    <value>ニュースの一覧</value>
  </data>
  <data name="NewsListPage" xml:space="preserve">
    <value>NewsListPage</value>
  </data>
  <data name="NewsMandatory" xml:space="preserve">
    <value>ニュースの内容は必須項目です</value>
  </data>
  <data name="NewsUpdated" xml:space="preserve">
    <value>ニュースが更新されました</value>
  </data>
  <data name="NoteOfManageNews" xml:space="preserve">
    <value>第三者によるニュース提供がある場合、インテグ方法についてシステム管理者にご連絡ください。</value>
  </data>
  <data name="Step1" xml:space="preserve">
    <value>ステップ1：「サイトの設定」を選択します。</value>
  </data>
  <data name="Step2" xml:space="preserve">
    <value>ステップ2：「カスタム設定」を選択します。</value>
  </data>
  <data name="Step3" xml:space="preserve">
    <value>ステップ3：ニュースの有効を「真」にして更新します。</value>
  </data>
  <data name="Step4" xml:space="preserve">
    <value>ステップ4：管理者画面の左側のメニューから「ニュース」をクリックします。</value>
  </data>
  <data name="Step5" xml:space="preserve">
    <value>ステップ5：「ニュースを追加」をクリックします。</value>
  </data>
  <data name="Step6" xml:space="preserve">
    <value>ステップ6：タイトルとニュースの内容を入力して「追加」をクリックします。</value>
  </data>
  <data name="SureDeleteNews" xml:space="preserve">
    <value>ニュースを削除してもよろしいですか？</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>タイトル</value>
  </data>
  <data name="TitleMandatory" xml:space="preserve">
    <value>タイトルは必須項目です</value>
  </data>
</root>