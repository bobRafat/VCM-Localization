<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvailableDates" xml:space="preserve">
    <value>Available Dates</value>
  </data>
  <data name="Border" xml:space="preserve">
    <value>Border</value>
  </data>
  <data name="CheckItemsToSubmit" xml:space="preserve">
    <value>Please check item(s) to submit</value>
  </data>
  <data name="EnterEmailSubject" xml:space="preserve">
    <value>Please enter 'Email Subject'</value>
  </data>
  <data name="EnterEmailSubject1" xml:space="preserve">
    <value>Enter email subject</value>
  </data>
  <data name="ForReviewAndApproval" xml:space="preserve">
    <value>has submitted lineage ad for your review and approval.</value>
  </data>
  <data name="FullColour" xml:space="preserve">
    <value>Full Colour</value>
  </data>
  <data name="GoToHistory" xml:space="preserve">
    <value>Go to History</value>
  </data>
  <data name="GoToList" xml:space="preserve">
    <value>Go to List</value>
  </data>
  <data name="HasAcceptedLineage" xml:space="preserve">
    <value>has accepted lineage</value>
  </data>
  <data name="HasRejectedLineage" xml:space="preserve">
    <value>has rejected lineage</value>
  </data>
  <data name="Headline" xml:space="preserve">
    <value>Headline</value>
  </data>
  <data name="InsertionDate" xml:space="preserve">
    <value>Insertion Date</value>
  </data>
  <data name="InvalidCopy" xml:space="preserve">
    <value>Invalid Copy</value>
  </data>
  <data name="InvalidDate" xml:space="preserve">
    <value>Invalid Date</value>
  </data>
  <data name="InvalidHeadline" xml:space="preserve">
    <value>Invalid Headline</value>
  </data>
  <data name="InvalidSuburbSelected" xml:space="preserve">
    <value>Invalid Suburb selected</value>
  </data>
  <data name="LinageEdit" xml:space="preserve">
    <value>Linage - Edit</value>
  </data>
  <data name="LineageCreate" xml:space="preserve">
    <value>Lineage - Create</value>
  </data>
  <data name="LineageHasBeenAccepted" xml:space="preserve">
    <value>Lineage has been accepted</value>
  </data>
  <data name="LineageHasBeenRejected" xml:space="preserve">
    <value>Your lineage has been rejected</value>
  </data>
  <data name="LineageHasBeenSubmitted" xml:space="preserve">
    <value>Lineage Ad has been submitted by</value>
  </data>
  <data name="LineageList" xml:space="preserve">
    <value>Lineage List</value>
  </data>
  <data name="LineageListAdmin" xml:space="preserve">
    <value>Lineage List - Admin</value>
  </data>
  <data name="LineageListAdminHistory" xml:space="preserve">
    <value>Lineage List - Admin (History)</value>
  </data>
  <data name="LineageListSupplier" xml:space="preserve">
    <value>Lineage List - Supplier</value>
  </data>
  <data name="ListAdmin" xml:space="preserve">
    <value>ListAdmin</value>
  </data>
  <data name="ListSupplier" xml:space="preserve">
    <value>ListSupplier</value>
  </data>
  <data name="Logo1" xml:space="preserve">
    <value>Logo x 1</value>
  </data>
  <data name="Logo2" xml:space="preserve">
    <value>Logo x 2</value>
  </data>
  <data name="LogoLC9790" xml:space="preserve">
    <value>Logo LC9790</value>
  </data>
  <data name="LogoTC9790" xml:space="preserve">
    <value>Logo TC9790</value>
  </data>
  <data name="NoItemsAvailable" xml:space="preserve">
    <value>No items available</value>
  </data>
  <data name="NoItemsSelected" xml:space="preserve">
    <value>No items selected</value>
  </data>
  <data name="NoPublicationsAvailable" xml:space="preserve">
    <value>No publications available</value>
  </data>
  <data name="OnlyNumaricsAllowed" xml:space="preserve">
    <value>Only Numarics allowed</value>
  </data>
  <data name="PropertyAddress" xml:space="preserve">
    <value>Property Address</value>
  </data>
  <data name="PropertyDescription" xml:space="preserve">
    <value>Property Description</value>
  </data>
  <data name="PropertySearch" xml:space="preserve">
    <value>Property Search</value>
  </data>
  <data name="PropertySuburb" xml:space="preserve">
    <value>Property Suburb</value>
  </data>
  <data name="RejectedLineage" xml:space="preserve">
    <value>rejected your lineage</value>
  </data>
  <data name="SureToApproveSelectedItems" xml:space="preserve">
    <value>Are you sure to APPROVE all selected items?</value>
  </data>
  <data name="SureToDeleteLineage" xml:space="preserve">
    <value>Are you sure to delete this lineage?</value>
  </data>
  <data name="SureToDeleteSelectedItems" xml:space="preserve">
    <value>Are you sure to DELETE all selected items?</value>
  </data>
  <data name="SureToRejectAllSelectedItems" xml:space="preserve">
    <value>Are you sure to REJECT all selected items?</value>
  </data>
  <data name="SureToSubmitSelectedItems" xml:space="preserve">
    <value>Are you sure to SUBMIT all selected items?</value>
  </data>
  <data name="TwoDecimalPlacesAllowed" xml:space="preserve">
    <value>Two decimal places only allowed</value>
  </data>
  <data name="ViewLineageList" xml:space="preserve">
    <value>Please view these lineage list</value>
  </data>
  <data name="ViewLineageList1" xml:space="preserve">
    <value>view your lineage list</value>
  </data>
  <data name="YouHaveItemsInList" xml:space="preserve">
    <value>You have {0} items in the list</value>
  </data>
</root>