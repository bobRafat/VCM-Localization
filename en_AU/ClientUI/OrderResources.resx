<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArtworkIsCompleted" xml:space="preserve">
    <value>Your Artwork is completed</value>
  </data>
  <data name="ArtworkReadyToOrder" xml:space="preserve">
    <value>Your Artwork is ready to order</value>
  </data>
  <data name="ArtworkReadyToSend" xml:space="preserve">
    <value>Your Artwork is ready to send</value>
  </data>
  <data name="AvailableBookings" xml:space="preserve">
    <value>Available Bookings</value>
  </data>
  <data name="AvailableSuppliers" xml:space="preserve">
    <value>Available Suppliers</value>
  </data>
  <data name="BackToQuoteRequest" xml:space="preserve">
    <value>Back to Quote Request</value>
  </data>
  <data name="BookingNumber" xml:space="preserve">
    <value>Booking Number</value>
  </data>
  <data name="CompletedJobsInPackage" xml:space="preserve">
    <value>You have completed {0} / {1} jobs in your package</value>
  </data>
  <data name="EnterMediaBookingNumber" xml:space="preserve">
    <value>Enter Media Booking Number</value>
  </data>
  <data name="EnterQuoteIncGST" xml:space="preserve">
    <value>Enter Quote inc. GST</value>
  </data>
  <data name="FillInDeliveryDetails" xml:space="preserve">
    <value>Please fill in delivery details</value>
  </data>
  <data name="FillInPublicationEmail" xml:space="preserve">
    <value>Please fill in publication email</value>
  </data>
  <data name="GoToRequestResult" xml:space="preserve">
    <value>Go to Request Result</value>
  </data>
  <data name="HasRequestedQuote" xml:space="preserve">
    <value>has requested a quote</value>
  </data>
  <data name="HasResponsedQuoteRequest" xml:space="preserve">
    <value>has responsed your quote request</value>
  </data>
  <data name="HasSentArtwork" xml:space="preserve">
    <value>has sent you an artwork</value>
  </data>
  <data name="HasSentInvoice" xml:space="preserve">
    <value>has sent you an Invoice - Invoice</value>
  </data>
  <data name="HasSentPurchaseOrder" xml:space="preserve">
    <value>has sent you a purchase order</value>
  </data>
  <data name="HasSentQuoteRequest" xml:space="preserve">
    <value>{0} has sent you a quote request for {1}</value>
  </data>
  <data name="MediaBookingNumber" xml:space="preserve">
    <value>Media Booking Number</value>
  </data>
  <data name="NoAvailableSuppliersSelected" xml:space="preserve">
    <value>No available suppliers selected</value>
  </data>
  <data name="NumberOnly" xml:space="preserve">
    <value>Number Only</value>
  </data>
  <data name="OrderReady" xml:space="preserve">
    <value>OrderReady</value>
  </data>
  <data name="PackageIsNullPleaseCheck" xml:space="preserve">
    <value>The package is null, please check the setting of template or package.</value>
  </data>
  <data name="PleaseWaitHiResArtwork" xml:space="preserve">
    <value>Please wait whilst your Hi-Res artwork is being sent to your supplier...</value>
  </data>
  <data name="PleaseWaitOrderBeingProcessed" xml:space="preserve">
    <value>Please wait while your order is being processed...</value>
  </data>
  <data name="PositionalDiagram" xml:space="preserve">
    <value>Positional Diagram</value>
  </data>
  <data name="QuoteQuantity" xml:space="preserve">
    <value>Quote Quantity</value>
  </data>
  <data name="QuoteRequestResult" xml:space="preserve">
    <value>Quote Request Result</value>
  </data>
  <data name="ReadyToOrder" xml:space="preserve">
    <value>Ready to Order</value>
  </data>
  <data name="ReadyToSend" xml:space="preserve">
    <value>Ready to Send</value>
  </data>
  <data name="RequestedDate" xml:space="preserve">
    <value>Requested Date</value>
  </data>
  <data name="RequestedQuantity" xml:space="preserve">
    <value>Requested Quantity</value>
  </data>
  <data name="RequestHasBeenAcceptedBy" xml:space="preserve">
    <value>Your quote has been accepted by {0}</value>
  </data>
  <data name="RequestHasBeenCancelledBy" xml:space="preserve">
    <value>The request has been cancelled by {0}</value>
  </data>
  <data name="RequestQuotes" xml:space="preserve">
    <value>Request Quotes</value>
  </data>
  <data name="RequestsSent" xml:space="preserve">
    <value>Requests Sent</value>
  </data>
  <data name="ResponsedDate" xml:space="preserve">
    <value>Responsed Date</value>
  </data>
  <data name="SelectQuantityGetFinalPrice" xml:space="preserve">
    <value>Please select the Quantity to get the Final Price</value>
  </data>
  <data name="SelectSuppliersToSendQuoteRequest" xml:space="preserve">
    <value>Please select the supplier(s) you wish to send a quote request to.</value>
  </data>
  <data name="SendToPublication" xml:space="preserve">
    <value>Send to Publication</value>
  </data>
  <data name="SendToSendlite" xml:space="preserve">
    <value>Send to Sendlite</value>
  </data>
  <data name="SubmitQuote" xml:space="preserve">
    <value>Submit Quote</value>
  </data>
  <data name="SuccessfullyResponsedWithPrice" xml:space="preserve">
    <value>You have successfully responsed with price</value>
  </data>
  <data name="SupplierQuoteRequest" xml:space="preserve">
    <value>Supplier Quote Request</value>
  </data>
  <data name="SureOrderWithThisSupplier" xml:space="preserve">
    <value>Are you sure to Order with this supplier?</value>
  </data>
  <data name="SureSendRequestToSelectedSupplier" xml:space="preserve">
    <value>Are you sure to send request to selected suppliers?</value>
  </data>
  <data name="UploadingError" xml:space="preserve">
    <value>Uploading error. Please retry.</value>
  </data>
  <data name="ViewAndDownloadArtwork" xml:space="preserve">
    <value>view and download artwork</value>
  </data>
  <data name="ViewAndRespond" xml:space="preserve">
    <value>view and respond</value>
  </data>
  <data name="ViewOrderConfirmationOnline" xml:space="preserve">
    <value>view your order confirmation online</value>
  </data>
  <data name="ViewTheRequest" xml:space="preserve">
    <value>view the request</value>
  </data>
  <data name="YouHaveResponsedWithPrice" xml:space="preserve">
    <value>You have already responsed with price</value>
  </data>
  <data name="SendQuoteRequest" xml:space="preserve">
    <value>Send Quote Request</value>
  </data>
  <data name="EnterEmailForOtherSupplier" xml:space="preserve">
    <value>Please enter Email address when you choose other supplier</value>
  </data>
</root>